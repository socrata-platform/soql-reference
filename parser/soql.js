/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var soql = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,38],$V2=[1,17],$V3=[1,32],$V4=[1,25],$V5=[1,26],$V6=[1,23],$V7=[1,40],$V8=[1,41],$V9=[1,34],$Va=[1,35],$Vb=[1,36],$Vc=[1,37],$Vd=[5,25,30,40,42],$Ve=[5,24,25,30,40,42],$Vf=[5,14,24,25,30,40,42],$Vg=[5,14,22,24,25,29,30,35,36,37,40,42,45,54,82],$Vh=[1,49],$Vi=[5,14,22,24,25,29,30,35,36,37,40,42,45,47,54,82],$Vj=[1,53],$Vk=[1,51],$Vl=[1,52],$Vm=[1,54],$Vn=[5,14,22,24,25,29,30,35,36,37,40,42,45,47,48,50,51,52,54,82],$Vo=[5,14,22,24,25,29,30,35,36,37,40,42,45,47,48,50,51,52,54,57,58,59,60,61,62,63,64,82],$Vp=[1,63],$Vq=[1,64],$Vr=[1,65],$Vs=[5,14,22,24,25,29,30,35,36,37,40,42,45,47,48,50,51,52,54,57,58,59,60,61,62,63,64,66,67,68,82],$Vt=[1,66],$Vu=[1,67],$Vv=[5,14,20,22,24,25,29,30,35,36,37,40,42,45,47,48,50,51,52,54,57,58,59,60,61,62,63,64,66,67,68,70,82],$Vw=[5,14,20,22,24,25,29,30,35,36,37,40,42,45,47,48,50,51,52,54,57,58,59,60,61,62,63,64,66,67,68,70,73,82],$Vx=[5,14,20,22,24,25,29,30,35,36,37,40,42,45,47,48,50,51,52,54,57,58,59,60,61,62,63,64,66,67,68,70,73,75,82],$Vy=[5,14,20,22,24,25,29,30,35,36,37,40,42,45,47,48,50,51,52,54,57,58,59,60,61,62,63,64,66,67,68,70,73,75,80,81,82],$Vz=[5,14,20,22,24,25,29,30,35,36,37,40,42,45,47,48,50,51,52,53,54,57,58,59,60,61,62,63,64,66,67,68,70,73,75,80,81,82],$VA=[5,30,40,42],$VB=[5,40,42],$VC=[5,29,30,40,42,54],$VD=[5,42],$VE=[1,137],$VF=[5,14,37,40,42],$VG=[5,14,40,42];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"query":3,"select":4,"EOF":5,"SELECT":6,"select-list":7,"where-clause":8,"group-by-clause":9,"order-by-clause":10,"limit-clause":11,"offset-clause":12,"system-star":13,",":14,"only-user-star-select-list":15,"user-star":16,"expression-select-list":17,"selection":18,":*":19,"*":20,"expression":21,"AS":22,"user-identifier":23,"WHERE":24,"GROUP":25,"BY":26,"expression-list":27,"having-clause":28,"HAVING":29,"ORDER":30,"ordering-list":31,"ordering":32,"sort-ordering":33,"null-ordering":34,"ASC":35,"DESC":36,"NULL":37,"FIRST":38,"LAST":39,"LIMIT":40,"integer-literal":41,"OFFSET":42,"disjunction":43,"conjunction":44,"OR":45,"negation":46,"AND":47,"NOT":48,"is-between-in":49,"IS":50,"BETWEEN":51,"IN":52,"(":53,")":54,"order":55,"term":56,"=":57,"==":58,"!=":59,"<>":60,"<":61,"<=":62,">=":63,">":64,"factor":65,"+":66,"-":67,"||":68,"exp":69,"/":70,"%":71,"unary":72,"^":73,"cast":74,"::":75,"identifier":76,"dereference":77,"SYSTEM_IDENTIFIER":78,"USER_IDENTIFIER":79,".":80,"[":81,"]":82,"value":83,"identifier-or-funcall":84,"literal":85,"NUMBER_LITERAL":86,"INTEGER_LITERAL":87,"STRING_LITERAL":88,"BOOLEAN_LITERAL":89,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"SELECT",14:",",19:":*",20:"*",22:"AS",24:"WHERE",25:"GROUP",26:"BY",29:"HAVING",30:"ORDER",35:"ASC",36:"DESC",37:"NULL",38:"FIRST",39:"LAST",40:"LIMIT",42:"OFFSET",45:"OR",47:"AND",48:"NOT",50:"IS",51:"BETWEEN",52:"IN",53:"(",54:")",57:"=",58:"==",59:"!=",60:"<>",61:"<",62:"<=",63:">=",64:">",66:"+",67:"-",68:"||",70:"/",71:"%",73:"^",75:"::",78:"SYSTEM_IDENTIFIER",79:"USER_IDENTIFIER",80:".",81:"[",82:"]",86:"NUMBER_LITERAL",87:"INTEGER_LITERAL",88:"STRING_LITERAL",89:"BOOLEAN_LITERAL"},
productions_: [0,[3,2],[4,7],[7,1],[7,3],[7,1],[15,1],[15,3],[15,1],[17,1],[17,3],[13,1],[16,1],[18,1],[18,3],[8,2],[8,0],[9,4],[9,0],[28,2],[28,0],[10,3],[10,0],[31,1],[31,3],[32,3],[33,1],[33,1],[33,0],[34,2],[34,2],[34,0],[11,2],[11,0],[12,2],[12,0],[21,1],[43,1],[43,3],[44,1],[44,3],[46,2],[46,1],[49,3],[49,4],[49,5],[49,6],[49,5],[49,6],[49,1],[27,1],[27,3],[55,1],[55,3],[55,3],[55,3],[55,3],[55,3],[55,3],[55,3],[55,3],[56,1],[56,3],[56,3],[56,3],[65,1],[65,3],[65,3],[65,2],[69,1],[69,3],[72,2],[72,2],[72,1],[74,3],[74,1],[76,1],[76,1],[23,1],[77,3],[77,4],[77,1],[83,1],[83,1],[83,3],[84,1],[84,4],[84,4],[85,1],[85,1],[85,1],[85,1],[85,1],[41,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
this.$ = {
            'select-list': $$[$0-5],
            'where-clause': $$[$0-4],
            'group-by-clause': $$[$0-3],
            'order-by-clause': $$[$0-2],
            'limit-clause': $$[$0-1],
            'offset-clause:': $$[$0]
            };
        
break;
case 3:
this.$ = {
            type: 'select-list',
            arguments: [$$[$0], null]
            };
        
break;
case 4:
this.$ = {
            type: 'select-list',
            arguments: [$$[$0-2], $$[$0]]
            };
        
break;
case 5:
this.$ = {
            type: 'select-list',
            arguments: [null, $$[$0]]
            };
        
break;
case 6:
this.$ = {
            type: 'only-user-star-select-list',
            arguments: [$$[$0], null]
            };
        
break;
case 7:
this.$ = {
            type: 'only-user-star-select-list',
            arguments: [$$[$0-2], $$[$0]]
            };
        
break;
case 8:
this.$ = {
            type: 'only-user-star-select-list',
            arguments: [null, $$[$0]]
            };
        
break;
case 9:
this.$ = {
            type: 'expression-select-list',
            arguments: [$$[$0]]
            };
        
break;
case 10:
this.$ = {
            type: 'expression-select-list',
            arguments: [$$[$0-2], $$[$0]]
            };
        
break;
case 11:
this.$ = {
            type: 'system-star',
            arguments: []
            };
        
break;
case 12:
this.$ = {
            type: 'user-star',
            arguments: []
            };
        
break;
case 13:
this.$ = {
            type: 'selection',
            arguments: [$$[$0], null]
            };
        
break;
case 14:
this.$ = {
            type: 'selection',
            arguments: [$$[$0-2], $$[$0]]
            };
        
break;
case 15: case 21: case 32: case 34:
this.$ = [$$[$0]];
break;
case 16: case 18: case 20: case 22: case 33: case 35:
this.$ = [];
break;
case 17:
this.$ = [$$[$0-1], $$[$0]];
break;
case 19: case 23: case 73: case 75: case 76: case 81: case 82: case 83: case 85:
this.$ = $$[$0];
break;
case 24:
this.$ = {
            type: 'ordering-list',
            arguments: [$$[$0-2], $$[$0]]
            };
        
break;
case 25:
this.$ = {
            type: 'ordering',
            arguments: [$$[$0-2], $$[$0-1], $$[$0]]
            };
        
break;
case 26: case 27:
this.$ = {
            type: 'sort-ordering',
            arguments: [$$[$0]]
            };
        
break;
case 29: case 30:
this.$ = {
            type: 'null-ordering',
            arguments: [$$[$0]]
            };
        
break;
case 36:
this.$ = {
            type: 'expression',
            arguments: [$$[$0]]
            };
        
break;
case 43:
this.$ = {
            type: 'is',
            arguments: [$$[$0-2], {type: 'null'}]
            };
        
break;
case 44:
this.$ = {
            type: 'is-not',
            arguments: [$$[$0-3], {type: 'null'}]
            };
        
break;
case 74:
this.$ = {
            type: 'cast',
            arguments: [$$[$0-2], $$[$0]]
            };
        
break;
case 77:
this.$ = {
            type: 'system-identifier',
            arguments: [$$[$0]]
            };
        
break;
case 78:
this.$ = {
            type: 'user-identifier',
            arguments: [$$[$0]]
            };
        
break;
case 79:
this.$ = {
            type: 'dereference-dot',
            arguments: [$$[$0-2], $$[$0]]
            };
        
break;
case 80:
this.$ = {
            type: 'dereference-brackets',
            arguments: [$$[$0-3], $$[$0-1]]
            };
        
break;
case 84:
this.$ = {
            type: 'expression-in-parentheses',
            arguments: [$$[$0-1]]
            };
        
break;
case 86: case 87:
this.$ = {
            type: 'funcall',
            arguments: [$$[$0-3], $$[$0-1]]
            };
        
break;
case 88: case 89:
this.$ = {
            type: 'number-literal',
            arguments: [$$[$0]]
            };
        
break;
case 90:
this.$ = {
            type: 'string-literal',
            arguments: [$$[$0]]
            };
        
break;
case 91:
this.$ = {
            type: 'boolean-literal',
            arguments: [$$[$0]]
            };
        
break;
case 92:
this.$ = {type: 'null', arguments: []};
break;
case 93:
this.$ = {
            type: 'integer-literal',
            arguments: [$$[$0]]
            };
        
break;
}
},
table: [{3:1,4:2,6:[1,3]},{1:[3]},{5:[1,4]},{7:5,13:6,15:7,16:9,17:10,18:12,19:[1,8],20:$V0,21:13,23:39,37:$V1,43:14,44:15,46:16,48:$V2,49:18,53:$V3,55:19,56:20,65:21,66:$V4,67:$V5,69:22,71:$V6,72:24,74:27,76:33,77:28,78:$V7,79:$V8,83:29,84:30,85:31,86:$V9,87:$Va,88:$Vb,89:$Vc},{1:[2,1]},o($Vd,[2,16],{8:42,24:[1,43]}),o($Ve,[2,3],{14:[1,44]}),o($Ve,[2,5]),o($Vf,[2,11]),o($Ve,[2,6],{14:[1,45]}),o($Ve,[2,8]),o([5,14,24,25,30,40,42,54],[2,12]),o($Ve,[2,9],{14:[1,46]}),o($Vf,[2,13],{22:[1,47]}),o([5,14,22,24,25,29,30,35,36,37,40,42,54,82],[2,36],{45:[1,48]}),o($Vg,[2,37],{47:$Vh}),o($Vi,[2,39]),{23:39,37:$V1,46:50,48:$V2,49:18,53:$V3,55:19,56:20,65:21,66:$V4,67:$V5,69:22,71:$V6,72:24,74:27,76:33,77:28,78:$V7,79:$V8,83:29,84:30,85:31,86:$V9,87:$Va,88:$Vb,89:$Vc},o($Vi,[2,42],{48:$Vj,50:$Vk,51:$Vl,52:$Vm}),o($Vn,[2,49],{57:[1,55],58:[1,56],59:[1,57],60:[1,58],61:[1,59],62:[1,60],63:[1,61],64:[1,62]}),o($Vo,[2,52],{66:$Vp,67:$Vq,68:$Vr}),o($Vs,[2,61],{20:$Vt,70:$Vu}),o($Vv,[2,65]),{23:39,37:$V1,53:$V3,66:$V4,67:$V5,69:68,72:24,74:27,76:33,77:28,78:$V7,79:$V8,83:29,84:30,85:31,86:$V9,87:$Va,88:$Vb,89:$Vc},o($Vv,[2,69],{73:[1,69]}),{23:39,37:$V1,53:$V3,66:$V4,67:$V5,72:70,74:27,76:33,77:28,78:$V7,79:$V8,83:29,84:30,85:31,86:$V9,87:$Va,88:$Vb,89:$Vc},{23:39,37:$V1,53:$V3,66:$V4,67:$V5,72:71,74:27,76:33,77:28,78:$V7,79:$V8,83:29,84:30,85:31,86:$V9,87:$Va,88:$Vb,89:$Vc},o($Vw,[2,73],{75:[1,72]}),o($Vx,[2,75],{80:[1,73],81:[1,74]}),o($Vy,[2,81]),o($Vy,[2,82]),o($Vy,[2,83]),{21:75,23:39,37:$V1,43:14,44:15,46:16,48:$V2,49:18,53:$V3,55:19,56:20,65:21,66:$V4,67:$V5,69:22,71:$V6,72:24,74:27,76:33,77:28,78:$V7,79:$V8,83:29,84:30,85:31,86:$V9,87:$Va,88:$Vb,89:$Vc},o($Vy,[2,85],{53:[1,76]}),o($Vy,[2,88]),o($Vy,[2,89]),o($Vy,[2,90]),o($Vy,[2,91]),o($Vy,[2,92]),o($Vz,[2,76]),o($Vz,[2,77]),o($Vz,[2,78]),o($VA,[2,18],{9:77,25:[1,78]}),{21:79,23:39,37:$V1,43:14,44:15,46:16,48:$V2,49:18,53:$V3,55:19,56:20,65:21,66:$V4,67:$V5,69:22,71:$V6,72:24,74:27,76:33,77:28,78:$V7,79:$V8,83:29,84:30,85:31,86:$V9,87:$Va,88:$Vb,89:$Vc},{15:80,16:9,17:10,18:12,20:$V0,21:13,23:39,37:$V1,43:14,44:15,46:16,48:$V2,49:18,53:$V3,55:19,56:20,65:21,66:$V4,67:$V5,69:22,71:$V6,72:24,74:27,76:33,77:28,78:$V7,79:$V8,83:29,84:30,85:31,86:$V9,87:$Va,88:$Vb,89:$Vc},{17:81,18:12,21:13,23:39,37:$V1,43:14,44:15,46:16,48:$V2,49:18,53:$V3,55:19,56:20,65:21,66:$V4,67:$V5,69:22,71:$V6,72:24,74:27,76:33,77:28,78:$V7,79:$V8,83:29,84:30,85:31,86:$V9,87:$Va,88:$Vb,89:$Vc},{17:82,18:12,21:13,23:39,37:$V1,43:14,44:15,46:16,48:$V2,49:18,53:$V3,55:19,56:20,65:21,66:$V4,67:$V5,69:22,71:$V6,72:24,74:27,76:33,77:28,78:$V7,79:$V8,83:29,84:30,85:31,86:$V9,87:$Va,88:$Vb,89:$Vc},{23:83,79:$V8},{23:39,37:$V1,44:84,46:16,48:$V2,49:18,53:$V3,55:19,56:20,65:21,66:$V4,67:$V5,69:22,71:$V6,72:24,74:27,76:33,77:28,78:$V7,79:$V8,83:29,84:30,85:31,86:$V9,87:$Va,88:$Vb,89:$Vc},{23:39,37:$V1,46:85,48:$V2,49:18,53:$V3,55:19,56:20,65:21,66:$V4,67:$V5,69:22,71:$V6,72:24,74:27,76:33,77:28,78:$V7,79:$V8,83:29,84:30,85:31,86:$V9,87:$Va,88:$Vb,89:$Vc},o($Vi,[2,41]),{37:[1,86],48:[1,87]},{23:39,37:$V1,49:88,53:$V3,55:19,56:20,65:21,66:$V4,67:$V5,69:22,71:$V6,72:24,74:27,76:33,77:28,78:$V7,79:$V8,83:29,84:30,85:31,86:$V9,87:$Va,88:$Vb,89:$Vc},{51:[1,89],52:[1,90]},{53:[1,91]},{23:39,37:$V1,53:$V3,56:92,65:21,66:$V4,67:$V5,69:22,71:$V6,72:24,74:27,76:33,77:28,78:$V7,79:$V8,83:29,84:30,85:31,86:$V9,87:$Va,88:$Vb,89:$Vc},{23:39,37:$V1,53:$V3,56:93,65:21,66:$V4,67:$V5,69:22,71:$V6,72:24,74:27,76:33,77:28,78:$V7,79:$V8,83:29,84:30,85:31,86:$V9,87:$Va,88:$Vb,89:$Vc},{23:39,37:$V1,53:$V3,56:94,65:21,66:$V4,67:$V5,69:22,71:$V6,72:24,74:27,76:33,77:28,78:$V7,79:$V8,83:29,84:30,85:31,86:$V9,87:$Va,88:$Vb,89:$Vc},{23:39,37:$V1,53:$V3,56:95,65:21,66:$V4,67:$V5,69:22,71:$V6,72:24,74:27,76:33,77:28,78:$V7,79:$V8,83:29,84:30,85:31,86:$V9,87:$Va,88:$Vb,89:$Vc},{23:39,37:$V1,53:$V3,56:96,65:21,66:$V4,67:$V5,69:22,71:$V6,72:24,74:27,76:33,77:28,78:$V7,79:$V8,83:29,84:30,85:31,86:$V9,87:$Va,88:$Vb,89:$Vc},{23:39,37:$V1,53:$V3,56:97,65:21,66:$V4,67:$V5,69:22,71:$V6,72:24,74:27,76:33,77:28,78:$V7,79:$V8,83:29,84:30,85:31,86:$V9,87:$Va,88:$Vb,89:$Vc},{23:39,37:$V1,53:$V3,56:98,65:21,66:$V4,67:$V5,69:22,71:$V6,72:24,74:27,76:33,77:28,78:$V7,79:$V8,83:29,84:30,85:31,86:$V9,87:$Va,88:$Vb,89:$Vc},{23:39,37:$V1,53:$V3,56:99,65:21,66:$V4,67:$V5,69:22,71:$V6,72:24,74:27,76:33,77:28,78:$V7,79:$V8,83:29,84:30,85:31,86:$V9,87:$Va,88:$Vb,89:$Vc},{23:39,37:$V1,53:$V3,65:100,66:$V4,67:$V5,69:22,71:$V6,72:24,74:27,76:33,77:28,78:$V7,79:$V8,83:29,84:30,85:31,86:$V9,87:$Va,88:$Vb,89:$Vc},{23:39,37:$V1,53:$V3,65:101,66:$V4,67:$V5,69:22,71:$V6,72:24,74:27,76:33,77:28,78:$V7,79:$V8,83:29,84:30,85:31,86:$V9,87:$Va,88:$Vb,89:$Vc},{23:39,37:$V1,53:$V3,65:102,66:$V4,67:$V5,69:22,71:$V6,72:24,74:27,76:33,77:28,78:$V7,79:$V8,83:29,84:30,85:31,86:$V9,87:$Va,88:$Vb,89:$Vc},{23:39,37:$V1,53:$V3,66:$V4,67:$V5,69:103,72:24,74:27,76:33,77:28,78:$V7,79:$V8,83:29,84:30,85:31,86:$V9,87:$Va,88:$Vb,89:$Vc},{23:39,37:$V1,53:$V3,66:$V4,67:$V5,69:104,72:24,74:27,76:33,77:28,78:$V7,79:$V8,83:29,84:30,85:31,86:$V9,87:$Va,88:$Vb,89:$Vc},o($Vv,[2,68]),{23:39,37:$V1,53:$V3,66:$V4,67:$V5,69:105,72:24,74:27,76:33,77:28,78:$V7,79:$V8,83:29,84:30,85:31,86:$V9,87:$Va,88:$Vb,89:$Vc},o($Vw,[2,71]),o($Vw,[2,72]),{23:39,76:106,78:$V7,79:$V8},{23:39,76:107,78:$V7,79:$V8},{21:108,23:39,37:$V1,43:14,44:15,46:16,48:$V2,49:18,53:$V3,55:19,56:20,65:21,66:$V4,67:$V5,69:22,71:$V6,72:24,74:27,76:33,77:28,78:$V7,79:$V8,83:29,84:30,85:31,86:$V9,87:$Va,88:$Vb,89:$Vc},{54:[1,109]},{16:110,20:$V0,21:112,23:39,27:111,37:$V1,43:14,44:15,46:16,48:$V2,49:18,53:$V3,55:19,56:20,65:21,66:$V4,67:$V5,69:22,71:$V6,72:24,74:27,76:33,77:28,78:$V7,79:$V8,83:29,84:30,85:31,86:$V9,87:$Va,88:$Vb,89:$Vc},o($VB,[2,22],{10:113,30:[1,114]}),{26:[1,115]},o($Vd,[2,15]),o($Ve,[2,4]),o($Ve,[2,7]),o($Ve,[2,10]),o($Vf,[2,14]),o($Vg,[2,38],{47:$Vh}),o($Vi,[2,40]),o($Vn,[2,43]),{37:[1,116]},{47:[1,117],48:$Vj,50:$Vk,51:$Vl,52:$Vm},{23:39,37:$V1,49:118,53:$V3,55:19,56:20,65:21,66:$V4,67:$V5,69:22,71:$V6,72:24,74:27,76:33,77:28,78:$V7,79:$V8,83:29,84:30,85:31,86:$V9,87:$Va,88:$Vb,89:$Vc},{53:[1,119]},{21:112,23:39,27:120,37:$V1,43:14,44:15,46:16,48:$V2,49:18,53:$V3,55:19,56:20,65:21,66:$V4,67:$V5,69:22,71:$V6,72:24,74:27,76:33,77:28,78:$V7,79:$V8,83:29,84:30,85:31,86:$V9,87:$Va,88:$Vb,89:$Vc},o($Vo,[2,53],{66:$Vp,67:$Vq,68:$Vr}),o($Vo,[2,54],{66:$Vp,67:$Vq,68:$Vr}),o($Vo,[2,55],{66:$Vp,67:$Vq,68:$Vr}),o($Vo,[2,56],{66:$Vp,67:$Vq,68:$Vr}),o($Vo,[2,57],{66:$Vp,67:$Vq,68:$Vr}),o($Vo,[2,58],{66:$Vp,67:$Vq,68:$Vr}),o($Vo,[2,59],{66:$Vp,67:$Vq,68:$Vr}),o($Vo,[2,60],{66:$Vp,67:$Vq,68:$Vr}),o($Vs,[2,62],{20:$Vt,70:$Vu}),o($Vs,[2,63],{20:$Vt,70:$Vu}),o($Vs,[2,64],{20:$Vt,70:$Vu}),o($Vv,[2,66]),o($Vv,[2,67]),o($Vv,[2,70]),o($Vx,[2,74]),o($Vy,[2,79]),{82:[1,121]},o($Vy,[2,84]),{54:[1,122]},{54:[1,123]},o($VC,[2,50],{14:[1,124]}),o($VD,[2,33],{11:125,40:[1,126]}),{26:[1,127]},{21:112,23:39,27:128,37:$V1,43:14,44:15,46:16,48:$V2,49:18,53:$V3,55:19,56:20,65:21,66:$V4,67:$V5,69:22,71:$V6,72:24,74:27,76:33,77:28,78:$V7,79:$V8,83:29,84:30,85:31,86:$V9,87:$Va,88:$Vb,89:$Vc},o($Vn,[2,44]),{23:39,37:$V1,49:129,53:$V3,55:19,56:20,65:21,66:$V4,67:$V5,69:22,71:$V6,72:24,74:27,76:33,77:28,78:$V7,79:$V8,83:29,84:30,85:31,86:$V9,87:$Va,88:$Vb,89:$Vc},{47:[1,130],48:$Vj,50:$Vk,51:$Vl,52:$Vm},{21:112,23:39,27:131,37:$V1,43:14,44:15,46:16,48:$V2,49:18,53:$V3,55:19,56:20,65:21,66:$V4,67:$V5,69:22,71:$V6,72:24,74:27,76:33,77:28,78:$V7,79:$V8,83:29,84:30,85:31,86:$V9,87:$Va,88:$Vb,89:$Vc},{54:[1,132]},o($Vy,[2,80]),o($Vy,[2,86]),o($Vy,[2,87]),{21:112,23:39,27:133,37:$V1,43:14,44:15,46:16,48:$V2,49:18,53:$V3,55:19,56:20,65:21,66:$V4,67:$V5,69:22,71:$V6,72:24,74:27,76:33,77:28,78:$V7,79:$V8,83:29,84:30,85:31,86:$V9,87:$Va,88:$Vb,89:$Vc},{5:[2,35],12:134,42:[1,135]},{41:136,87:$VE},{21:140,23:39,31:138,32:139,37:$V1,43:14,44:15,46:16,48:$V2,49:18,53:$V3,55:19,56:20,65:21,66:$V4,67:$V5,69:22,71:$V6,72:24,74:27,76:33,77:28,78:$V7,79:$V8,83:29,84:30,85:31,86:$V9,87:$Va,88:$Vb,89:$Vc},o($VA,[2,20],{28:141,29:[1,142]}),o([5,14,22,24,25,29,30,35,36,37,40,42,45,47,50,51,52,54,82],[2,45],{48:$Vj}),{23:39,37:$V1,49:143,53:$V3,55:19,56:20,65:21,66:$V4,67:$V5,69:22,71:$V6,72:24,74:27,76:33,77:28,78:$V7,79:$V8,83:29,84:30,85:31,86:$V9,87:$Va,88:$Vb,89:$Vc},{54:[1,144]},o($Vn,[2,47]),o($VC,[2,51]),{5:[2,2]},{41:145,87:$VE},o($VD,[2,32]),o($VD,[2,93]),o($VB,[2,21]),o($VB,[2,23],{14:[1,146]}),o($VF,[2,28],{33:147,35:[1,148],36:[1,149]}),o($VA,[2,17]),{21:150,23:39,37:$V1,43:14,44:15,46:16,48:$V2,49:18,53:$V3,55:19,56:20,65:21,66:$V4,67:$V5,69:22,71:$V6,72:24,74:27,76:33,77:28,78:$V7,79:$V8,83:29,84:30,85:31,86:$V9,87:$Va,88:$Vb,89:$Vc},o($Vn,[2,46]),o($Vn,[2,48]),{5:[2,34]},{21:140,23:39,31:151,32:139,37:$V1,43:14,44:15,46:16,48:$V2,49:18,53:$V3,55:19,56:20,65:21,66:$V4,67:$V5,69:22,71:$V6,72:24,74:27,76:33,77:28,78:$V7,79:$V8,83:29,84:30,85:31,86:$V9,87:$Va,88:$Vb,89:$Vc},o($VG,[2,31],{34:152,37:[1,153]}),o($VF,[2,26]),o($VF,[2,27]),o($VA,[2,19]),o($VB,[2,24]),o($VG,[2,25]),{38:[1,154],39:[1,155]},o($VG,[2,29]),o($VG,[2,30])],
defaultActions: {4:[2,1],134:[2,2],145:[2,34]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 47;
break;
case 2:return 22;
break;
case 3:return 35;
break;
case 4:return 51;
break;
case 5:return 26;
break;
case 6:return 36;
break;
case 7:return 'DISTINCT';
break;
case 8:return 'EXCEPT';
break;
case 9:return 'FROM';
break;
case 10:return 'FULL';
break;
case 11:return 38;
break;
case 12:return 25;
break;
case 13:return 52;
break;
case 14:return 'INNER';
break;
case 15:return 50;
break;
case 16:return 'JOIN';
break;
case 17:return 39;
break;
case 18:return 'LEFT';
break;
case 19:return 40;
break;
case 20:return 48;
break;
case 21:return 37;
break;
case 22:return 42;
break;
case 23:return 'ON';
break;
case 24:return 45;
break;
case 25:return 30;
break;
case 26:return 'OUTER';
break;
case 27:return 'RIGHT';
break;
case 28:return 6;
break;
case 29:return 24;
break;
case 30:return 14;
break;
case 31:return 20;
break;
case 32:return 19;
break;
case 33:return "(";
break;
case 34:return ")";
break;
case 35:return "==";
break;
case 36:return "=";
break;
case 37:return "!=";
break;
case 38:return "<>";
break;
case 39:return "<";
break;
case 40:return "<=";
break;
case 41:return ">=";
break;
case 42:return ">";
break;
case 43:return "+";
break;
case 44:return "-";
break;
case 45:return "||";
break;
case 46:return "/";
break;
case 47:return "%";
break;
case 48:return "^";
break;
case 49:return "::";
break;
case 50:return ".";
break;
case 51:return "[";
break;
case 52:return "]";
break;
case 53:return 87;
break;
case 54:return 86;
break;
case 55:return 88;
break;
case 56:return 89;
break;
case 57:return 79;
break;
case 58:return 78;
break;
case 59:return 5;
break;
}
},
rules: [/^(?:\s+)/,/^(?:AND\b)/,/^(?:AS\b)/,/^(?:ASC\b)/,/^(?:BETWEEN\b)/,/^(?:BY\b)/,/^(?:DESC\b)/,/^(?:DISTINCT\b)/,/^(?:EXCEPT\b)/,/^(?:FROM\b)/,/^(?:FULL\b)/,/^(?:FIRST\b)/,/^(?:GROUP\b)/,/^(?:IN\b)/,/^(?:INNER\b)/,/^(?:IS\b)/,/^(?:JOIN\b)/,/^(?:LAST\b)/,/^(?:LEFT\b)/,/^(?:LIMIT\b)/,/^(?:NOT\b)/,/^(?:NULL\b)/,/^(?:OFFSET\b)/,/^(?:ON\b)/,/^(?:OR\b)/,/^(?:ORDER\b)/,/^(?:OUTER\b)/,/^(?:RIGHT\b)/,/^(?:SELECT\b)/,/^(?:WHERE\b)/,/^(?:,)/,/^(?:\*)/,/^(?::\*)/,/^(?:\()/,/^(?:\))/,/^(?:==)/,/^(?:=)/,/^(?:!=)/,/^(?:<>)/,/^(?:<)/,/^(?:<=)/,/^(?:>=)/,/^(?:>)/,/^(?:\+)/,/^(?:-)/,/^(?:\|\|)/,/^(?:\/)/,/^(?:%)/,/^(?:\^)/,/^(?:::)/,/^(?:\.)/,/^(?:\[)/,/^(?:\])/,/^(?:[0-9]+)/,/^(?:[0-9]+(\.[0-9]*)?([eE][+-]?[0-9]+)?)/,/^(?:".*")/,/^(?:[TRUE|FALSE])/,/^(?:[0-9a-zA-Z]+)/,/^(?:[0-9a-zA-Z]+)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();